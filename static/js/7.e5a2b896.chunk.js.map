{"version":3,"sources":["utils/erc20.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/compoundApyHelpers.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/TotalValueLocked.tsx","views/Farms/Farms.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","formatApy","_apy","apy","order","floor","log10","units","num","toFixed","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","variant","DepositModal","max","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","mr","StyledButton","Button","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","ethereum","account","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","lpName","toUpperCase","isApproved","isGreaterThan","lpContract","onApprove","useApprove","handleApprove","console","error","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","textTransform","ApyButton","onPresentApyModal","size","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","split","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","replace","dual","earnLabel","GelatoEarnedPerThousand1D","farmAPR_","farmAPR","style","display","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","TotalValueLocked","Card","mediaQueries","lg","Heading","attrs","farmsLP","useFarms","usePriceBnbBusd","usePriceCakeBusd","TVL","useRef","MIN_VALUE","getTVL","activeFarms","filter","current","calculateTVL","slice","farmsToDisplay","map","tokenAmount","tvl","plus","textAlign","border","padding","borderRadius","lineHeight","animation","Farms","path","useWallet","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","inactiveFarms","farmsList","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","Page","exact"],"mappings":"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","file":"static/js/7.e5a2b896.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  // return percentage.toFixed(2);\n  return formatApy(percentage)\n}\n\n// Stolen from the big-brains of beefy team\nexport const formatApy = (_apy) => {\n  if (!_apy) return `???`\n\n  const apy = _apy\n\n  const order = apy < 1 ? 0 : Math.floor(Math.log10(apy) / 3)\n  const units = ['', 'k', 'M', 'B', 'T', 'Q', 'Q', 'S', 'S']\n  const num = apy / 1000 ** order\n\n  return `${num.toFixed(2)}${units[order] ? units[order] : ''}`\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={`https://exchange.icecreamswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  background-color: #850085;\n  border: 1px solid #850085;\n  border-radius: 6px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst StyledButton = styled(Button)`\n  border-radius: 6px;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <StyledButton\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(999, 'Harvest')}\n      </StyledButton>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    return getContract(ethereum as provider, lpAddress)\n  }, [ethereum, lpAddress])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          Gelato\n        </Text>\n        <Text bold color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Gelato per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.icecreamswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport { apyModalRoi, calculateCakeEarnedPerThousandDollars, formatApy } from 'utils/compoundApyHelpers'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  // background: linear-gradient(\n  //   45deg,\n  //   rgba(255, 0, 0, 1) 0%,\n  //   rgba(255, 154, 0, 1) 10%,\n  //   rgba(208, 222, 33, 1) 20%,\n  //   rgba(79, 220, 74, 1) 30%,\n  //   rgba(63, 218, 216, 1) 40%,\n  //   rgba(47, 201, 226, 1) 50%,\n  //   rgba(28, 127, 238, 1) 60%,\n  //   rgba(95, 21, 242, 1) 70%,\n  //   rgba(186, 12, 248, 1) 80%,\n  //   rgba(251, 7, 217, 1) 90%,\n  //   rgba(255, 0, 0, 1) 100%\n  // );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 6px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('Gelato', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'GLTO'\n  const farmApy = farm.apy && farm.apy.times(new BigNumber(100))\n  const GelatoEarnedPerThousand1D =\n    farm.apy && calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D =\n    farm.apy && calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n\n  const farmAPR_ = farm.apy && farm.apy.times(new BigNumber(100))\n  const farmAPR = formatApy(farmAPR_)\n\n  return (\n    <FCard>\n      {farm.lpSymbol === 'GLTO-BNB ICLP' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>APR (daily):</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {apyModalRoi({\n                  amountEarned: GelatoEarnedPerThousand1D,\n                  amountInvested: oneThousandDollarsWorthOfCake,\n                })}\n                %\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>APY (monthly):</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {apyModalRoi({\n                  amountEarned: cakeEarnedPerThousand365D,\n                  amountInvested: oneThousandDollarsWorthOfCake,\n                })}\n                %\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>APR (yearly):</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(999, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(999, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n","import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst TotalValueLocked = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n  const TVL = useRef(Number.MIN_VALUE)\n\n  const getTVL = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.multiplier !== '0X')\n    TVL.current = 0\n    calculateTVL(activeFarms)\n\n    return TVL.current.toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateTVL = useCallback(\n    (farmsToDisplay) => {\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        let tvl = new BigNumber(0)\n        if (farm.lpTotalInQuoteToken) {\n          if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n            tvl = bnbPrice.times(farm.lpTotalInQuoteToken)\n          } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n            tvl = cakePrice.times(farm.lpTotalInQuoteToken)\n          } else {\n            tvl = tvl.plus(farm.lpTotalInQuoteToken)\n          }\n          TVL.current += tvl.toNumber()\n        }\n        return tvl\n      })\n    },\n    [bnbPrice, cakePrice],\n  )\n\n  return (\n    <>\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        {getTVL() ? (\n          <Text\n            mt=\"16px\"\n            color=\"secondary\"\n            mb=\"10px\"\n            style={{\n              textAlign: 'center',\n              background: '#2c2c2f',\n              border: '1px solid gray',\n              padding: 10,\n              borderRadius: 3,\n              color: 'white',\n              fontSize: 20,\n              lineHeight: '20px',\n            }}\n          >\n            TVL: ${getTVL()}\n          </Text>\n        ) : (\n          <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default TotalValueLocked\n","import React, { useEffect, useCallback } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport TotalValueLocked from './components/TotalValueLocked'\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, farmsLP, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"20px\" style={{ textAlign: 'center' }}>\n        {TranslateString(999, 'Stake ICLP tokens to earn Gelato')}\n        <TotalValueLocked />\n      </Heading>\n      <Text style={{ textAlign: 'center' }} mb=\"20px\" color=\"#e901e9\">\n        {TranslateString(9991, '🔥 FEES HARVEST: 10% TO BE BURNED 🔥')}\n      </Text>\n\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <FarmTabButtons />\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}